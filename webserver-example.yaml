kind: Namespace
apiVersion: v1
metadata:
  name: webserver-example
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: httpd
  namespace: webserver-example
  labels:
    app: httpd
    app.kubernetes.io/component: httpd
    app.kubernetes.io/instance: httpd
    app.kubernetes.io/name: httpd
spec:
  replicas: 1
  selector:
    matchLabels:
      deployment: httpd
  template:
    metadata:
      creationTimestamp: null
      labels:
        deployment: httpd
      annotations:
        openshift.io/generated-by: OpenShiftNewApp
    spec:
      containers:
        - name: httpd
          image: 'registry.redhat.io/ubi9/httpd-24:latest'
          ports:
            - containerPort: 8080
              protocol: TCP
            - containerPort: 8443
              protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      schedulerName: default-scheduler
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600
---
kind: Service
apiVersion: v1
metadata:
  name: httpd
  namespace: webserver-example
  labels:
    app: httpd
    app.kubernetes.io/component: httpd
    app.kubernetes.io/instance: httpd
    app.kubernetes.io/name: httpd
  annotations:
    openshift.io/generated-by: OpenShiftNewApp
spec:
  ports:
    - name: 8080-tcp
      protocol: TCP
      port: 8080
      targetPort: 8080
    - name: 8443-tcp
      protocol: TCP
      port: 8443
      targetPort: 8443
  type: ClusterIP
  selector:
    deployment: httpd
---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: webserver-example
  namespace: webserver-example
  labels:
    app: httpd
    app.kubernetes.io/component: httpd
    app.kubernetes.io/instance: httpd
    app.kubernetes.io/name: httpd
spec:
  to:
    kind: Service
    name: httpd
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Allow
    destinationCACertificate: ''
  port:
    targetPort: 8080-tcp
  alternateBackends: []
